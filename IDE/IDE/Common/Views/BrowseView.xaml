<UserControl Name="BrowseUserControl"
             x:Class="IDE.Common.Views.Browse"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:converters="clr-namespace:IDE.Common.ViewModels.Converters"
             xmlns:mui="http://firstfloorsoftware.com/ModernUI"
             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             xmlns:models="clr-namespace:IDE.Common.Models"
             mc:Ignorable="d" 
             d:DesignHeight="600" d:DesignWidth="800">


    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.PopupBox.xaml"/>
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Badged.xaml"/>
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.ComboBox.xaml"/>
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.ProgressBar.xaml"/>
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.ScrollViewer.xaml"/>
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Accent/MaterialDesignColor.Lime.xaml"/>
                <ResourceDictionary Source="/FirstFloor.ModernUI;component/Assets/Converters.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource MaterialDesignComboBox}">
                <Setter Property="Background" Value="{DynamicResource WindowBackground}"/>
            </Style>

            <Style x:Key="IconFont">
                <Setter Property="TextElement.FontFamily" Value="/Others/Resources/#icomoon"/>
                <Setter Property="TextElement.Foreground" Value="{DynamicResource WindowText}"/>
                <Setter Property="TextElement.FontSize" Value="15"/>
            </Style>

            <Style TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource MaterialDesignScrollViewer}"/>

            <!--#region TOGGLE -->
            <Style x:Key="AnimatedSwitch" TargetType="{x:Type ToggleButton}">
                <Setter Property="Foreground" Value="Black" />
                <Setter Property="Background" Value="#FAF9F9" />
                <Setter Property="BorderBrush" Value="#FAF9F9" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="ToggleButton">
                            <Viewbox Stretch="Uniform">
                                <Canvas Name="Layer_1" Width="20" Height="20" Canvas.Left="10" Canvas.Top="0">
                                    <Ellipse  Canvas.Left="0" Width="20" Height="20" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="0.5"/>
                                    <Ellipse  Canvas.Left="15" Width="20" Height="20" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="0.5"/>
                                    <Border Canvas.Left="10" Width="15" Height="20" Name="rect416927" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0,0.5,0,0.5"/>
                                    <Ellipse x:Name="ellipse"  Canvas.Left="0" Width="20" Height="20" Fill="White" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="0.3">
                                        <Ellipse.RenderTransform>
                                            <TranslateTransform X="0" Y="0" />
                                        </Ellipse.RenderTransform>
                                        <Ellipse.BitmapEffect>
                                            <DropShadowBitmapEffect Softness="0.1" ShadowDepth="0.7" Direction="270" Color="#BBBBBB"/>
                                        </Ellipse.BitmapEffect>
                                    </Ellipse>
                                </Canvas>
                            </Viewbox>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="True" >
                                    <Trigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <ColorAnimation Storyboard.TargetProperty="Background.Color" To="#52D468" Duration="0:0:0.2" />
                                                <ColorAnimation Storyboard.TargetProperty="BorderBrush.Color" To="#41C955" Duration="0:0:0.2" />
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Ellipse.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="ellipse">
                                                    <SplineDoubleKeyFrame KeyTime="0" Value="0"/>
                                                    <SplineDoubleKeyFrame KeyTime="0:0:0.4" Value="15" KeySpline="0, 1, 0.6, 1"/>
                                                </DoubleAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.EnterActions>
                                    <Trigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <ColorAnimation Storyboard.TargetProperty="Background.Color" To="#d45252" Duration="0:0:0.2" />
                                                <ColorAnimation Storyboard.TargetProperty="BorderBrush.Color" To="#C94141" Duration="0:0:0.2" />
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Ellipse.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="ellipse">
                                                    <SplineDoubleKeyFrame KeyTime="0" Value="15"/>
                                                    <SplineDoubleKeyFrame KeyTime="0:0:0.3" Value="0" KeySpline="0, 0.5, 0.5, 1"/>
                                                </DoubleAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.ExitActions>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <!--#endregion-->
            <converters:SolidColorToBrush x:Key="ColorToBrush"/>
            <converters:ConnectionToTextConverter x:Key="ConnectionConverter"/>
            <converters:StopBitsToString x:Key="StopBitsToString"/>
            <converters:IntToString x:Key="IntToString"/>
            <converters:ParityToString x:Key="ParityToString"/>
            <converters:InvertBooleanConverter x:Key="InvertBoolean"/>
        </ResourceDictionary>
    </UserControl.Resources>



    <materialDesign:DialogHost Margin="-300" IsOpen="{Binding DialogHostIsOpen}">
        
        <!--#region Cover content-->
        
        <materialDesign:DialogHost.DialogContent>
            <Border Padding="15" Width="350" Height="225" VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                <Border.Style>
                    <Style TargetType="Border">
                        <Setter Property="Background" Value="{DynamicResource WindowBackground}"/>
                    </Style>
                </Border.Style>
                <StackPanel>
                    <TextBlock Text="{Binding DialogHost.CurrentAction}" Style="{StaticResource Heading2}" HorizontalAlignment="Center" Margin="0,0,0,10" Foreground="{Binding ElementName=textBlockGridHeader, Path=Foreground}"/>
                    <mui:ModernProgressRing Style="{StaticResource WanderingCubesProgressRingStyle}" Width="80" Height="80" IsActive="True"/>
                    <TextBlock Text="{Binding DialogHost.Message}" Margin="0,10,0,0" HorizontalAlignment="Center" Foreground="{Binding ElementName=textBlockGridHeader, Path=Foreground}"/>
                    <TextBlock Text="{Binding DialogHost.CurrentProgress}" Margin="0,5,0,0" HorizontalAlignment="Center" FontSize="10" Foreground="{Binding ElementName=textBlockGridHeader, Path=Foreground}"/>
                    <Button Margin="0,20,0,0" Style="{StaticResource MaterialDesignFlatButton}" Content="Cancel" VerticalContentAlignment="Top" Command="{x:Static materialDesign:DialogHost.CloseDialogCommand}" Foreground="{Binding ElementName=textBlockGridHeader, Path=Foreground}"/>
                </StackPanel>
            </Border>
        </materialDesign:DialogHost.DialogContent>
        
        <!--#endregion-->
        
        <Grid Name="MainGrid" Margin="300">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="129*"/>
            <ColumnDefinition Width="256*"/>
            <ColumnDefinition Width="15*"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="18*"/>
            <RowDefinition Height="7*"/>
        </Grid.RowDefinitions>

        <!--#region Connection menu-->

        <StackPanel Grid.Column="1" Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,-30,0.4,0" ToolTip="Check to establish connection with&#10;settings defined in popout on the right.">
            <TextBlock Text="Connection status: " Style="{StaticResource Heading2}" VerticalAlignment="Center"/>
            <ToggleButton x:Name="ConnectionToggle" Style="{StaticResource AnimatedSwitch}" Height="25"  VerticalAlignment="Center" Background="#C94141" Command="{Binding ConnectionCommand}" CommandParameter="{Binding ElementName=ConnectionToggle, Path=IsChecked}" IsChecked="{Binding ConnectionToggleIsChecked}"/>

                <materialDesign:Badged Badge="{Binding BadgeText}" BadgeColorZoneMode="Accent" VerticalAlignment="Center" >
                <materialDesign:PopupBox StaysOpen="True" Margin="25,0,0,0" VerticalAlignment="Center" PlacementMode="LeftAndAlignTopEdges">
                    <Border Padding="10" Background="{DynamicResource WindowBackground}" BorderBrush="#DDDDDD" BorderThickness="1" CornerRadius="10">
                        <StackPanel Width="200">
                                <TextBlock Text="Connection settings:" Style="{StaticResource Heading2}"/>
                                <ComboBox materialDesign:HintAssist.Hint="COM port" materialDesign:HintAssist.IsFloating="True" ItemsSource="{Binding AvailableCOMPorts}" SelectedValue="{Binding SelectedCOMPort}" IsEnabled="{Binding ElementName=ConnectionToggle, Path=IsChecked, Converter={StaticResource InvertBoolean}}">
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="DropDownOpened">
                                            <i:InvokeCommandAction Command="{Binding Path=RefreshCOMPortsCommand}"/>
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                </ComboBox>
                                <ComboBox materialDesign:HintAssist.Hint="Baudrate" materialDesign:HintAssist.IsFloating="True" SelectedValuePath="Content" SelectedValue="{Binding Settings.BaudRate, Converter={StaticResource IntToString}}" IsEnabled="{Binding ElementName=ConnectionToggle, Path=IsChecked, Converter={StaticResource InvertBoolean}}">
                                    <ComboBoxItem Content="110" />
                                    <ComboBoxItem Content="150" />
                                    <ComboBoxItem Content="300" />
                                    <ComboBoxItem Content="2400" />
                                    <ComboBoxItem Content="4800" />
                                    <ComboBoxItem Content="9600" />
                                    <ComboBoxItem Content="19200" />
                                    <ComboBoxItem Content="38400" />
                                    <ComboBoxItem Content="57600" />
                                    <ComboBoxItem Content="115200" />
                                    <ComboBoxItem Content="230400" />
                                    <ComboBoxItem Content="460800" />
                                    <ComboBoxItem Content="921600" />
                                </ComboBox>
                                <ComboBox materialDesign:HintAssist.Hint="Data bits" materialDesign:HintAssist.IsFloating="True" SelectedValuePath="Content" SelectedValue="{Binding Settings.DataBits, Converter={StaticResource IntToString}}" IsEnabled="{Binding ElementName=ConnectionToggle, Path=IsChecked, Converter={StaticResource InvertBoolean}}">
                                    <ComboBoxItem Content="8" />
                                    <ComboBoxItem Content="7" />
                                    <ComboBoxItem Content="6" />
                                    <ComboBoxItem Content="5" />
                                </ComboBox>
                                <ComboBox materialDesign:HintAssist.Hint="Stop bits" materialDesign:HintAssist.IsFloating="True" SelectedValuePath="Content" SelectedValue="{Binding Settings.StopBits, Converter={StaticResource StopBitsToString}}" IsEnabled="{Binding ElementName=ConnectionToggle, Path=IsChecked, Converter={StaticResource InvertBoolean}}">
                                    <ComboBoxItem Content="1" />
                                    <ComboBoxItem Content="1.5" />
                                    <ComboBoxItem Content="2" />
                                </ComboBox>
                                <ComboBox materialDesign:HintAssist.Hint="Parity" materialDesign:HintAssist.IsFloating="True" SelectedValuePath="Content" SelectedValue="{Binding Settings.Parity, Converter={StaticResource ParityToString}}" IsEnabled="{Binding ElementName=ConnectionToggle, Path=IsChecked, Converter={StaticResource InvertBoolean}}">
                                    <ComboBoxItem Content="None" />
                                    <ComboBoxItem Content="Odd" />
                                    <ComboBoxItem Content="Even" />
                                    <ComboBoxItem Content="Mark" />
                                    <ComboBoxItem Content="Space" />
                                </ComboBox>
                                <ComboBox materialDesign:HintAssist.Hint="Handshake" materialDesign:HintAssist.IsFloating="True" SelectedValuePath="Content" SelectedValue="{Binding Settings.Handshake}" IsEnabled="{Binding ElementName=ConnectionToggle, Path=IsChecked, Converter={StaticResource InvertBoolean}}">
                                    <ComboBoxItem Content="None"/>
                                    <ComboBoxItem Content="RTS/CTS" />
                                    <ComboBoxItem Content="DTR/DSR" />
                                    <ComboBoxItem Content="RS485-rts"/>
                                </ComboBox>
                            </StackPanel>
                    </Border>
                </materialDesign:PopupBox>
            </materialDesign:Badged>
        </StackPanel>

        <!--#endregion-->

        <!--#region RemoteProgram List-->

        <Border Margin="0,0,10,0" Width="Auto" CornerRadius="10" BorderBrush="#DDDDDD" BorderThickness="1"  Grid.RowSpan="2">
            <DockPanel Height="Auto">
                <TextBlock x:Name="textBlockGridHeader" Text="Available remote programs:" Style="{StaticResource Heading2}" Margin="20,3,0,0" DockPanel.Dock="Top"/>
                <DataGrid ItemsSource="{Binding RemotePrograms}" SelectedItem="{Binding SelectedRemoteProgram}" AutoGenerateColumns="False" DockPanel.Dock="Bottom">

                    <DataGrid.Columns>
                        <mui:DataGridTextColumn Header="Name" Binding="{Binding Name, Mode=OneWay}"/>
                        <mui:DataGridTextColumn Header="Size" Binding="{Binding Size, Mode=OneWay}"/>
                        <mui:DataGridTextColumn Header="Last edited" Binding="{Binding Timestamp, Mode=OneWay}"/>
                    </DataGrid.Columns>

                        <DataGrid.Resources>
                            <ContextMenu x:Key="RemoteContextMenu" ScrollViewer.VerticalScrollBarVisibility="Hidden">
                                <ContextMenu.Items>
                                    <MenuItem Header="Refresh" Command="{Binding DataContext.RefreshClickCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DataGrid}}" ToolTip="Refreshes list of programs stored on manipulator." CommandParameter="Refresh" Style="{DynamicResource IconFont}">
                                        <MenuItem.Icon>
                                            <TextBlock Text="6" Style="{DynamicResource IconFont}" TextAlignment="Center" FontWeight="Bold"/>
                                        </MenuItem.Icon>
                                    </MenuItem>
                                    <MenuItem Header="Acquire" Command="{Binding DataContext.DownloadClickCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DataGrid}}" ToolTip="Acquiring program from manipulator to be stored on local drive." CommandParameter="Pull" Style="{DynamicResource IconFont}">
                                        <MenuItem.Icon>
                                            <TextBlock Text="2" Style="{DynamicResource IconFont}" TextAlignment="Center" FontWeight="Bold"/>
                                        </MenuItem.Icon>
                                    </MenuItem>
                                    <MenuItem Header="Execute" Command="{Binding DataContext.RunClickCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DataGrid}}" ToolTip="Starts executing selected program." CommandParameter="Execute" Style="{DynamicResource IconFont}">
                                        <MenuItem.Icon>
                                            <TextBlock Text="5" Style="{DynamicResource IconFont}" TextAlignment="Center" FontWeight="Bold"/>
                                        </MenuItem.Icon>
                                    </MenuItem>
                                    <MenuItem Header="Send new" Command="{Binding DataContext.UploadClickCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DataGrid}}" ToolTip="Sends program from local drive to manipulator." CommandParameter="Pull" Style="{DynamicResource IconFont}">
                                        <MenuItem.Icon>
                                            <TextBlock Text="7" Style="{DynamicResource IconFont}" TextAlignment="Center" FontWeight="Bold"/>
                                        </MenuItem.Icon>
                                    </MenuItem>
                                </ContextMenu.Items>
                            </ContextMenu>
                        </DataGrid.Resources>
                        <DataGrid.ContextMenu>
                            <ContextMenu ScrollViewer.VerticalScrollBarVisibility="Hidden">
                                <MenuItem Header="Refresh" Command="{Binding RefreshClickCommand}" ToolTip="Refreshes list of programs stored on manipulator." Style="{DynamicResource IconFont}">
                                    <MenuItem.Icon>
                                        <TextBlock Text="6" Style="{DynamicResource IconFont}" TextAlignment="Center" FontWeight="Bold"/>
                                    </MenuItem.Icon>
                                </MenuItem>
                                <MenuItem Header="Send new" Command="{Binding UploadClickCommand}" ToolTip="Sends program from local drive to manipulator." Style="{DynamicResource IconFont}">
                                    <MenuItem.Icon>
                                        <TextBlock Text="7" Style="{DynamicResource IconFont}" TextAlignment="Center" FontWeight="Bold"/>
                                    </MenuItem.Icon>
                                </MenuItem>
                            </ContextMenu>
                        </DataGrid.ContextMenu>

                    <DataGrid.RowStyle>
                        <Style TargetType="DataGridRow" BasedOn="{StaticResource {x:Type DataGridRow}}">
                            <Setter Property="ContextMenu" Value="{StaticResource RemoteContextMenu}"/>
                        </Style>
                    </DataGrid.RowStyle>

                </DataGrid>
            </DockPanel>
        </Border>

        <!--#endregion-->

        <!--#region KINECT STUFF-->

            <Border Grid.Column="1" CornerRadius="10" BorderBrush="#DDDDDD" BorderThickness="1" Grid.ColumnSpan="2" Grid.RowSpan="1"/>

        <!--#endregion-->

        <!--#region Command window-->

        <Border Grid.Row="1" Grid.Column="1" CornerRadius="10" BorderBrush="#DDDDDD" BorderThickness="1" Grid.ColumnSpan="2" Margin="0,10,0,0">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="9*"/>
                    <RowDefinition Height="2*"/>
                </Grid.RowDefinitions>

                    <models:ProgramEditor  x:Name="CommandHistory" Padding="3" Background="Transparent" IsHighlightingEnabled="True" IsReadOnly="True"  HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto" BorderThickness="0,0,0,1" BorderBrush="#DDDDDD" ShowLineNumbers="False" Foreground="{Binding ElementName=textBlockGridHeader, Path=Foreground}">
                    <i:Interaction.Behaviors>
                        <models:AvalonEditBehaviour GiveMeTheText="{Binding CommandHistoryText, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                    </i:Interaction.Behaviors>

                    <models:ProgramEditor.ContextMenu>
                        <ContextMenu ScrollViewer.VerticalScrollBarVisibility="Hidden">

                            <MenuItem Header="Font Family" Style="{DynamicResource IconFont}">
                                <MenuItem.Icon>
                                    <TextBlock Text="4" Style="{DynamicResource IconFont}" TextAlignment="Center" FontWeight="Bold"/>
                                </MenuItem.Icon>
                                <MenuItem Header="Times New Roman" Style="{DynamicResource IconFont}" Command="{Binding ChangeFontCommand}" CommandParameter="Times New Roman">
                                    <MenuItem.Icon>
                                        <TextBlock Text="4" Style="{DynamicResource IconFont}" TextAlignment="Center" FontWeight="Bold"/>
                                    </MenuItem.Icon>
                                </MenuItem>
                                <MenuItem Header="Arial" Command="{Binding ChangeFontCommand}" Style="{DynamicResource IconFont}" CommandParameter="Arial">
                                    <MenuItem.Icon>
                                        <TextBlock Text="4" Style="{DynamicResource IconFont}" TextAlignment="Center" FontWeight="Bold"/>
                                    </MenuItem.Icon>
                                </MenuItem>
                                <MenuItem Header="Calibri" Command="{Binding ChangeFontCommand}" Style="{DynamicResource IconFont}" CommandParameter="Calibri">
                                    <MenuItem.Icon>
                                        <TextBlock Text="4" Style="{DynamicResource IconFont}" TextAlignment="Center" FontWeight="Bold"/>
                                    </MenuItem.Icon>
                                    </MenuItem>
                                <MenuItem Header="Segoe UI" Command="{Binding ChangeFontCommand}" Style="{DynamicResource IconFont}" CommandParameter="Segoe UI">
                                    <MenuItem.Icon>
                                        <TextBlock Text="4" Style="{DynamicResource IconFont}" TextAlignment="Center" FontWeight="Bold"/>
                                    </MenuItem.Icon>
                                </MenuItem>
                            </MenuItem>

                            <Separator/>

                            <MenuItem Header="Export" Command="{Binding ExportHistoryCommand}" Style="{DynamicResource IconFont}">
                                <MenuItem.Icon>
                                    <TextBlock Text="3" Style="{DynamicResource IconFont}" TextAlignment="Center" FontWeight="Bold"/>
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem Header="Clear" Command="{Binding ClearHistoryCommand}" Style="{DynamicResource IconFont}">
                                <MenuItem.Icon>
                                    <TextBlock Text="1" Style="{DynamicResource IconFont}" TextAlignment="Center" FontWeight="Bold"/>
                                </MenuItem.Icon>
                            </MenuItem>

                        </ContextMenu>

                    </models:ProgramEditor.ContextMenu>

                </models:ProgramEditor>

                <DockPanel Grid.Row="1">
                    <StackPanel Orientation="Horizontal" DockPanel.Dock="Right" Width="105" MinHeight="25">
                        <Button Content="Send" Command="{Binding SendClickCommand}"/>
                        <ToggleButton x:Name="SyntaxCheckToggle" Style="{StaticResource AnimatedSwitch}" Height="25" VerticalAlignment="Center" IsChecked="True" ToolTip="If checked, syntax will be validated" Background="#C94141"/>
                    </StackPanel>
                        <models:ProgramEditor x:Name="CommandInput" Padding="3" IsOneLine="True" DoSyntaxCheck="{Binding ElementName=SyntaxCheckToggle, Path=IsChecked}" IsHighlightingEnabled="True" IsIntellisenseEnabled="True" Background="Transparent" HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Disabled" BorderThickness="0,0,1,0" BorderBrush="#DDDDDD" Foreground="{Binding ElementName=textBlockGridHeader, Path=Foreground}" ShowLineNumbers="False">
                        <i:Interaction.Behaviors>
                            <models:AvalonEditBehaviour GiveMeTheText="{Binding CommandInputText, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                        </i:Interaction.Behaviors>

                        <models:ProgramEditor.ContextMenu>
                                <ContextMenu ScrollViewer.VerticalScrollBarVisibility="Hidden">

                                <MenuItem Header="Font Family">
                                    <MenuItem.Icon>
                                        <TextBlock Text="4" Style="{DynamicResource IconFont}" TextAlignment="Center" FontWeight="Bold"/>
                                    </MenuItem.Icon>
                                        <MenuItem Header="Times New Roman" Command="{Binding ChangeFontCommand}" CommandParameter="Times New Roman">
                                            <MenuItem.Icon>
                                                <TextBlock Text="4" Style="{DynamicResource IconFont}" TextAlignment="Center" FontWeight="Bold"/>
                                            </MenuItem.Icon>
                                        </MenuItem>
                                    <MenuItem Header="Arial" Command="{Binding ChangeFontCommand}" CommandParameter="Arial">
                                            <MenuItem.Icon>
                                                <TextBlock Text="4" Style="{DynamicResource IconFont}" TextAlignment="Center" FontWeight="Bold"/>
                                            </MenuItem.Icon>
                                        </MenuItem>
                                    <MenuItem Header="Calibri" Command="{Binding ChangeFontCommand}" CommandParameter="Calibri">
                                            <MenuItem.Icon>
                                                <TextBlock Text="4" Style="{DynamicResource IconFont}" TextAlignment="Center" FontWeight="Bold"/>
                                            </MenuItem.Icon>
                                        </MenuItem>
                                    <MenuItem Header="Segoe UI" Command="{Binding ChangeFontCommand}" CommandParameter="Segoe UI">
                                            <MenuItem.Icon>
                                                <TextBlock Text="4" Style="{DynamicResource IconFont}" TextAlignment="Center" FontWeight="Bold"/>
                                            </MenuItem.Icon>
                                        </MenuItem>
                                </MenuItem>

                            </ContextMenu>
                        </models:ProgramEditor.ContextMenu>

                    </models:ProgramEditor>

                </DockPanel>
            </Grid>
        </Border>

        <!--#endregion-->

    </Grid>
    </materialDesign:DialogHost>
</UserControl>
